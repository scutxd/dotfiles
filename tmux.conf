#|
#| File    : ~/.tmux.conf
#| Author  : rayntu 
#|
#| Apply with:
#|   tmux source-file ~/.tmux.conf
#|

# set shell
set -g default-shell /bin/zsh

# set terminal
set -g default-terminal "screen-256color"

# Set prefix
set-option -g prefix C-a
unbind-key C-a
bind-key C-a send-prefix

# reload config
# bind M-R source-file ~/.tmux.conf

# select panes
bind   h select-pane -L
bind   j select-pane -D
bind   k select-pane -U
bind   l select-pane -R

# # make ctrl-arrow work
# set-window-option -g xterm-keys on

# # remove Esc-Wait off so Vim works faster
# set-option -sg escape-time 0

# # start numbering at 1
# set -g base-index 1

# #set-option -g default-command ranger
# #set-option -g default-shell bash
# set-option -g default-shell /usr/bin/zsh

# # WM window title string (uses statusbar variables)
# set -g set-titles on
# set -g set-titles-string "tmux:#I [ #W ]"

# make mouse useful in copy mode
set -g mouse on

#|    copy-mode bindings                                                    <<<
#|=============================================================================

# enter copy mode
# unbind [
# bind M-Space copy-mode
# bind Escape copy-mode

# use Vim motion keys while in copy mode (what else?)
setw -g mode-keys vi

# # use this to list all copy-mode bindings:
# #   tmux list-keys -t emacs-copy
# #   tmux list-keys -t vim-copy

# more natural copy/paste
bind-key   -T copy-mode-vi      y  send-keys -X  copy-selection
# paste和copy-selection不一样，要先unbind，而且格式也要和上面的[一样
unbind ]
bind p paste-buffer
# bind                          M-p  send-keys -X  paste-buffer
# # bind                          C-v  send-keys -X  paste-buffer

# # bind-key C-c run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"
# bind M-c run "tmux show-buffer | xclip -selection clipboard -i"
# bind M-v run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"

# # toggle selection with V rather than Space
bind-key   -T copy-mode-vi      v  send-keys -X  begin-selection
# bind-key   -T copy-mode-vi    M-v  send-keys -X  rectangle-toggle
# bind-key   -T copy-mode-vi      V  send-keys -X  rectangle-toggle

# # the following sections are not Vim-standard but they match my ~/.vimrc

# # scroll down/up with CTRL+j/k
# bind-key   -T copy-mode-vi    C-k  send-keys -X  scroll-up
# bind-key   -T copy-mode-vi    C-j  send-keys -X  scroll-down

# # page down/up with Space/BackSpace
# bind-key   -T copy-mode-vi BSpace  send-keys -X  page-up
# bind-key   -T copy-mode-vi  Space  send-keys -X  page-down

# # swap ,/; to be more consistent with n/N on my layout (qwerty-lafayette)
# unbind-key -T copy-mode-vi     ,
# unbind-key -T copy-mode-vi     \;
# bind-key   -T copy-mode-vi      ,  send-keys -X  jump-again
# bind-key   -T copy-mode-vi     \;  send-keys -X  jump-reverse
# # >>>

# #|    suckless.vim bindings                                                 <<<
# #|=============================================================================


# # move panes (FIXME)
# #bind   H swap-pane -L
# #bind M-H swap-pane -L
# bind   J swap-pane -D
# bind M-J swap-pane -D
# bind   K swap-pane -U
# bind M-K swap-pane -U
# #bind   L swap-pane -R
# #bind M-L swap-pane -R

# # resize panes
# bind   C-h resize-pane -L 5
# bind M-C-h resize-pane -L 5
# bind   C-j resize-pane -D 2
# bind M-C-j resize-pane -D 2
# bind   C-k resize-pane -U 2
# bind M-C-k resize-pane -U 2
# bind   C-l resize-pane -R 5
# bind M-C-l resize-pane -R 5

# # new|prev|next window
# bind   y new-window
# bind M-y new-window
# bind   Y new-window \; split-window -h \; select-pane -L
# bind M-Y new-window \; split-window -h \; select-pane -L
# bind   u previous-window
# bind M-u previous-window
# bind   i next-window
# bind M-i next-window

# # move windows
# bind   U swap-window -t -1
# bind M-U swap-window -t -1
# bind   I swap-window -t +1
# bind M-I swap-window -t +1

# # vertical|horizontal splits
# bind   o split-window -v
# bind M-o split-window -v
# bind   O split-window -h
# bind M-O split-window -h
# # >>>

# #|    other key bindings                                                    <<<
# #|=============================================================================

# bind   . command-prompt
# bind M-. command-prompt

# # toggle status bar (hidden by default)
# set-option -g status off
# bind-key   s set-option status
# bind-key M-s set-option status

# # go back to the last pane/window
# #bind-key M-Space last-pane
# #bind-key M-Space last-window
# # >>>

#|    color theme                                                           <<<
#|=============================================================================

# statusbar
# set -g status-utf8 on # 状态栏支持utf8
set -g status-interval 1 # 状态栏刷新时间
set -g status-justify left # 状态栏列表左对齐
setw -g monitor-activity on # 非当前窗口有内容更新时在状态栏通知

# set -g status-bg black # 设置状态栏背景黑色
# set -g status-fg yellow # 设置状态栏前景黄色
# set -g status-style "bg=black, fg=yellow" # 状态栏前景背景色

# set -g status-left "#[bg=#FF661D] ❐ #S " # 状态栏左侧内容
# set -g status-right 'Continuum status: #{continuum_status}' # 状态栏右侧内容
# set -g status-left-length 300 # 状态栏左边长度300
# set -g status-right-length 500 # 状态栏左边长度500

set -wg window-status-format " #I #W " # 状态栏窗口名称格式
set -wg window-status-current-format " #I:#W#F " # 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
set -wg window-status-separator "" # 状态栏窗口名称之间的间隔
set -wg window-status-current-style "bg=red" # 状态栏当前窗口名称的样式
# set -wg window-status-last-style "fg=red" # 状态栏最后一个窗口名称的样式

set -g message-style "bg=#202529, fg=#91A8BA" # 指定消息通知的前景、后景色

# # statusbar content
# setw -g window-status-format '#[bg=colour234,fg=colour243] #I: #W #[default]'
# #setw -g window-status-current-format '#[bg=colour24,fg=colour248] #I: #[fg=white]#W #[default]'
# setw -g window-status-current-format '#[bg=colour239,fg=colour248] #I: #[fg=white]#W #[default]'

# # pane border
# set -g pane-border-fg        colour240
# set -g pane-active-border-fg colour240
# # >>>

# # vim: set ft=config fdm=marker fmr=<<<,>>> fdl=0:

# List of plugins

# Installation
# Requirements: tmux version 1.9 (or higher), git, bash.

# Clone TPM:
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# 
# Key bindings
# prefix + I
# Installs new plugins from GitHub or any other git repository
# Refreshes TMUX environment
# prefix + U
# updates plugin(s)
# prefix + alt + u
# remove/uninstall plugins not on the plugin list

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Begin of configuration of dracula theme
set -g @plugin 'dracula/tmux'
# Disable weather functionality
set -g @dracula-show-weather false
# Enable powerline symbols:
# set -g @dracula-show-powerline true
# Enable military time:
set -g @dracula-military-time true
# End of configuration of dracula theme


# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'
